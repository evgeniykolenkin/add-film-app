{"mappings":"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","sources":["src/script/main.js"],"sourcesContent":["// строковые константы\r\nconst CHECKED_CLASS_NAME = \"checked\";\r\nconst CHANGED_CLASS_NAME = \"changed\";\r\nconst HIDDEN_CLASS_NAME = \"hidden\";\r\nconst CHECKED_ACTION = \"checked\";\r\nconst DELETE_ACTION = \"delete\";\r\nconst EDIT_ACTION = \"edit\";\r\nconst SAVE_ACTION = \"save\";\r\n\r\n// константы из html\r\nconst formNode = document.getElementById(\"add__app-form\");\r\nconst inputNode = document.getElementById(\"add__app-input\");\r\nconst addBtnNode = document.getElementById(\"btn__add-film\");\r\nconst listNode = document.getElementById(\"add__app-list\");\r\n\r\nlet films = [];\r\n\r\n//подгружаем базу данных\r\ncreateFirestore(\"films\").pull();\r\n\r\n// const filmsFromStorage = localStorage.getItem(\"films\");\r\n// if (filmsFromStorage) {\r\n//   films = JSON.parse(filmsFromStorage);\r\n//   films.forEach((film) => renderFilm(film));\r\n// }\r\n// countFilmsElements();\r\n\r\n// сохранение массива films в LocalStorage\r\n// function saveFilmsToStorage() {\r\n//   localStorage.setItem(\"films\", JSON.stringify(films));\r\n// }\r\n\r\n// функции----------------------------------------------\r\n\r\n//создание хранилища данных\r\n//пока локалСторадж\r\nfunction createFirestore(key) {\r\n  return {\r\n    key,\r\n    //метод для получения данных из хранилища\r\n    pull: function () {\r\n      const data = localStorage.getItem(key);\r\n\r\n      if (data) {\r\n        films = JSON.parse(data);\r\n        films.forEach((film) => renderFilm(film));\r\n      }\r\n\r\n      countFilmsElements();\r\n    },\r\n    //метод для создание ячейки данных в хранилище\r\n    push: function (films) {\r\n      localStorage.setItem(key, JSON.stringify(films));\r\n    },\r\n  };\r\n}\r\n\r\n// получение родителя таргета\r\nconst getParentNode = (e) => e.target.closest(\".add__app-film\");\r\n\r\n// добавление обработчиков событий по клику на кнопки с data-action\r\nfunction addFilmListeners(e) {\r\n  const targetEl = e.target.dataset.action;\r\n  switch (true) {\r\n    // удаление фильма\r\n    // если click по дате \"delete\", то выполняем функцию\r\n    case targetEl === DELETE_ACTION:\r\n      deleteFilm(e);\r\n      break;\r\n    // редактируем название\r\n    // если click по дате \"edit\", то выполняем функцию\r\n    case targetEl === EDIT_ACTION:\r\n      editFilm(e);\r\n      break;\r\n    // сохраняем название\r\n    // если click по дате \"save\", то выполняем функцию\r\n    case targetEl === SAVE_ACTION:\r\n      saveEdit(e);\r\n      break;\r\n    // отмечаем фильм просмотренным\r\n    // если click по дате \"checked\", то выполняем функцию\r\n    case targetEl === CHECKED_ACTION:\r\n      checkedFilm(e);\r\n      break;\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\n// удаление слушателей с ЭЛЕМЕНТА, в нашем случае с li(далее parentNode)\r\nfunction removeFilmListeners(el) {\r\n  el.removeEventListener(\"click\", addFilmListeners);\r\n}\r\n\r\n// рендер каждого нового фильма\r\nfunction renderFilm(film) {\r\n  // формируем css class для состояния checked\r\n  const cssClassChecked = film.checked\r\n    ? \"add__app-film checked\"\r\n    : \"add__app-film\";\r\n  const cssClassChanged = film.changed ? \"hidden changed\" : \"hidden\";\r\n  // формируем разметку для нового фильма\r\n  const filmHTML = `\r\n  <li id=\"${film.id}\" class=\"${cssClassChecked}\">\r\n    <div class=\"col__left\">\r\n      <button data-action=\"checked\" class=\"btn btn__check-film\">\r\n        <img src=\"resources/unchecked.png\" alt=\"no\" />\r\n      </button>\r\n      <form class=\"edit__film-form\">\r\n        <input class=\"film__title\" readonly value=\"${film.text}\" />\r\n        <p class=\"${cssClassChanged}\">изменено</p>\r\n        <button data-action=\"save\" class=\"btn btn__save-edit hidden\">\r\n          <img src=\"resources/favicon.ico\" class=\"save__img\" alt=\"\" />\r\n        </button>\r\n      </form>\r\n    </div>\r\n    <div class=\"col__right\">\r\n      <button data-action=\"edit\" class=\"btn btn__edit-film\">\r\n        <img src=\"resources/edit.png\" class=\"edit__img\" alt=\"\" />\r\n      </button>\r\n      <button data-action=\"delete\" class=\"btn btn__delete-film\">\r\n        <img src=\"resources/btn-cross.png\" alt=\"\" />\r\n      </button>\r\n    </div>\r\n  </li>`;\r\n\r\n  // добавляем ее на страницу\r\n  listNode.insertAdjacentHTML(\"beforeend\", filmHTML);\r\n}\r\n\r\n// добавление фильма\r\nfunction addFilm(e) {\r\n  // отменяем отправку формы\r\n  e.preventDefault();\r\n\r\n  // достаем текст из инпута\r\n  // удаляя при этом пробелы в конце и начале строки\r\n  const filmText = inputNode.value.trim();\r\n\r\n  // проверяем, чтобы текст был введен\r\n  if (!filmText) {\r\n    alert(\"Введите название фильма\");\r\n    return;\r\n  }\r\n\r\n  // создаём объект с данными из нового фильма\r\n  const newFilm = {\r\n    id: Date.now(),\r\n    initialText: filmText,\r\n    text: filmText,\r\n    checked: false,\r\n    changed: false,\r\n  };\r\n\r\n  // добавляем этот объект(фильм) в массив\r\n  films.push(newFilm);\r\n  console.log(films);\r\n\r\n  // сохраняем данные в хранилище\r\n  createFirestore(\"films\").push(films);\r\n\r\n  renderFilm(newFilm);\r\n\r\n  // очищаем инпут и оставляем фокус на нем\r\n  inputNode.value = \"\";\r\n  inputNode.focus();\r\n\r\n  countFilmsElements();\r\n}\r\n\r\n// удаление фильма\r\nfunction deleteFilm(e) {\r\n  const parentNode = getParentNode(e);\r\n\r\n  // удаление на уровне данных\r\n  // определяем id тега li(элемента массива films)\r\n  const id = parseInt(parentNode.id);\r\n\r\n  // удаление элемента из массива с помощью фильтрации\r\n  films = films.filter((film) => film.id !== id);\r\n\r\n  // сохраняем данные в хранилище\r\n  createFirestore(\"films\").push(films);\r\n\r\n  // удаление на уровне разметки\r\n  // удаляем родителя таргета\r\n  parentNode.remove();\r\n  console.log(films);\r\n\r\n  removeFilmListeners(parentNode);\r\n\r\n  countFilmsElements();\r\n}\r\n\r\n// изменение свойств элемента списка на просмотренный(checked)\r\nfunction checkedFilm(e) {\r\n  // тоже самое тут\r\n  // только меняем класс у элемента\r\n  const parentNode = getParentNode(e);\r\n  console.log(parentNode);\r\n\r\n  // изменение свойств(checked) на уровне данных\r\n  const id = parseInt(parentNode.id);\r\n  const film = films.find((film) => film.id === id);\r\n  film.checked = !film.checked;\r\n\r\n  // сохраняем данные в хранилище\r\n  createFirestore(\"films\").push(films);\r\n\r\n  // тоглим класс на уровне разметки\r\n  parentNode.classList.toggle(CHECKED_CLASS_NAME);\r\n}\r\n\r\n// редатирование фильма\r\nfunction editFilm(e) {\r\n  const parentNode = getParentNode(e);\r\n\r\n  // а тут мы обращаемся к элементу внутри родителя\r\n  const editBtnNode = parentNode.querySelector(\".btn__edit-film\");\r\n  const saveBtnNode = parentNode.querySelector(\".btn__save-edit\");\r\n  const filmTitle = parentNode.querySelector(\".film__title\");\r\n\r\n  saveBtnNode.classList.remove(HIDDEN_CLASS_NAME);\r\n  editBtnNode.classList.add(HIDDEN_CLASS_NAME);\r\n  filmTitle.removeAttribute(\"readonly\");\r\n  filmTitle.focus();\r\n}\r\n\r\n// сохранение изменений\r\nfunction saveEdit(e) {\r\n  // аналогичная функция верхней\r\n  e.preventDefault();\r\n  const parentNode = getParentNode(e);\r\n\r\n  const editBtnNode = parentNode.querySelector(\".btn__edit-film\");\r\n  const saveBtnNode = parentNode.querySelector(\".btn__save-edit\");\r\n  const textHiddenNode = parentNode.querySelector(\".hidden\");\r\n  const filmTitle = parentNode.querySelector(\".film__title\");\r\n  saveBtnNode.classList.add(HIDDEN_CLASS_NAME);\r\n  editBtnNode.classList.remove(HIDDEN_CLASS_NAME);\r\n  filmTitle.setAttribute(\"readonly\", true);\r\n\r\n  //изменяем состояние фильма на changed на уровне данных\r\n  const id = parseInt(parentNode.id);\r\n  const film = films.find((film) => film.id === id);\r\n\r\n  if (!filmTitle.value.trim()) {\r\n    alert(\"Введите название фильма\");\r\n    film.changed = false;\r\n    textHiddenNode.classList.remove(CHANGED_CLASS_NAME);\r\n    return (filmTitle.value = film.initialText);\r\n  }\r\n  // если изначальный текст не равен новому\r\n  if (film.initialText !== filmTitle.value) {\r\n    // добавляем класс на уровне разметки\r\n    textHiddenNode.classList.add(CHANGED_CLASS_NAME);\r\n    // меняем статус на уровне данных\r\n    film.changed = true;\r\n    film.text = filmTitle.value.trim();\r\n  } else {\r\n    // убираем класс на уровне разметки\r\n    textHiddenNode.classList.remove(CHANGED_CLASS_NAME);\r\n    // меняем статус на уровне данных\r\n    film.changed = false;\r\n    film.text = film.initialText;\r\n  }\r\n\r\n  // сохраняем данные в хранилище\r\n  createFirestore(\"films\").push(films);\r\n}\r\n\r\n// проверка количества объектов в массиве\r\nfunction countFilmsElements() {\r\n  if (films.length === 0) {\r\n    const emptyListHTML = `\r\n    <li id=\"empty__item-list\" class=\"empty__item-list\">\r\n      <img src=\"resources/empty.png\" alt=\"\" />\r\n    </li>`;\r\n    listNode.insertAdjacentHTML(\"afterbegin\", emptyListHTML);\r\n  }\r\n\r\n  if (films.length > 0) {\r\n    const emptyListElement = document.getElementById(\"empty__item-list\");\r\n    emptyListElement ? emptyListElement.remove() : null;\r\n  }\r\n}\r\n\r\n// обработчики событий----------------------------------\r\n\r\n// на элемент списка/фильм (li)\r\nlistNode.addEventListener(\"click\", addFilmListeners);\r\n\r\n// добавление фильма\r\nformNode.addEventListener(\"submit\", addFilm);\r\n"],"names":[],"version":3,"file":"index.900caf0b.js.map","sourceRoot":"/__parcel_source_root/"}